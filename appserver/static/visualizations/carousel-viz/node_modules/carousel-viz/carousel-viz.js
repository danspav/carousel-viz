class carousel_viz{
	constructor(){
		this.slides = [];
		this.slidesToShow = 3;
		this.slidesToScroll = 1;
		this.autoplay = true; 
		this.autoplaySpeed = 3000;
		this.colorMode = true;
		this.value = "";
		this.caption="";
		this.unit = "";
		this.numDecimalPlaces="0"
		this.thousandsSeparator = false;
		this.unitPosition = "after";
		this.isInfinite = true;
		this.size = "normal";
		this.autoWidth = true;
		this.orientation = "horizontal";
		this.direction="left"
		this.rtl=false;
		// Value Options
		this.forceAllCaps = false;
		this.numDecimalPlaces = 0;
		this.showDots = false;
		this.isSplunkDarkMode = false;
		this.id = this.createUUID();
		this.validAutoplaySpeeds={"vslow":10000,"slow":7500,"normal":3000,"fast":2000,"vfast":1000};
		this.validSizes={"xsmall":75,"small":100,"normal":250,"large":300,"xlarge":500};
	}

	
	
		
	setConfig(config, namespace){
		var vizUtils = require('api/SplunkVisualizationUtils');
		// Get Config parameters:
		this.slidesToShow = parseInt(config[namespace + 'slidesToShow']) || 3;
		this.autoplay = vizUtils.escapeHtml(config[namespace + "autoplay"]) || true;
		this.slidesToScroll = parseInt(config[namespace + 'slidesToScroll']) || 1;
		
		this.forceAllCaps = vizUtils.escapeHtml(config[namespace + "forceAllCaps"]) || false;
		this.autoplaySpeed = vizUtils.escapeHtml(config[namespace + 'autoplaySpeed']) || "normal";
		this.numDecimalPlaces = parseInt(config[namespace + 'numDecimalPlaces']) || 0;
		this.colorMode = vizUtils.escapeHtml(config[namespace + "colorMode"]) || "foreground";
		this.thousandsSeparator = vizUtils.escapeHtml(config[namespace + "thousandsSeparator"]) || false;
		this.unitPosition = vizUtils.escapeHtml(config[namespace + "unitPosition"]) || "after";
		this.defaultCaption = vizUtils.escapeHtml(config[namespace + 'defaultCaption']) || ""; 
		this.size = vizUtils.escapeHtml(config[namespace + 'size']) || "normal"; 
		this.unit = vizUtils.escapeHtml(config[namespace + 'unit']) || ""; 
		this.caption = vizUtils.escapeHtml(config[namespace + 'caption']) || ""; 
		this.isInfinite = vizUtils.escapeHtml(config[namespace + 'rotation']) || "infinite"; 
		this.showDots = vizUtils.escapeHtml(config[namespace + 'showDots']) || false; 
		this.orientation = vizUtils.escapeHtml(config[namespace + 'orientation']) || "horizontal"; 
		this.direction = vizUtils.escapeHtml(config[namespace + 'direction']) || "left"; 
		this.rtl = (this.direction=="right");
		this.autoWidth = vizUtils.escapeHtml(config[namespace + 'autoWidth']) || false; 
		
		if (this.autoplaySpeed < 1000){ this.autoplaySpeed=1000;}
		//Enforce Boolean values to be boolean
		this.forceAllCaps = (this.forceAllCaps=="true");
		this.isInfinite = (this.isInfinite=="infinite");
		this.autoplay=(this.auotplay || this.autoplay=="true");
		this.showDots = (this.showDots=="true");
		this.orientation = (this.orientation=="horizontal") ? "horizontal" : "vertical";
		this.direction = (this.direction=="left") ? "left" : "right";
		this.autoWidth = (this.autoWidth=="true");
		this.colorMode = this.colorMode=="foreground" ? "foreground" : "background";
		if(this.numDecimalPlaces >4) { this.numDecimalPlaces=4;}
		if(this.numDecimalPlaces <0) { this.numDecimalPlaces=0;}
		if(this.slidesToShow >10) { this.slidesToShow=10;}
		if(this.slidesToShow <1) { this.slidesToShow=1;}
		if (this.slidesToScroll >  this.slidesToShow) { this.slidesToScroll = this.slidesToShow;}
		if (this.slidesToScroll <  1) { this.slidesToScroll = 1;}

		if(this.unitPosition!="after"){ this.unitPosition="before";}
		if(!this.validAutoplaySpeeds[this.autoplaySpeed]) { this.autoplaySpeed=3000;} else{ this.autoplaySpeed=this.validAutoplaySpeeds[this.autoplaySpeed];}
		if(!this.validSizes[this.size]) { this.size="normal";}
		this.thousandsSeparator = (this.thousandsSeparator=="true")
		
		this.isSplunkDarkMode = (vizUtils.getCurrentTheme()=="dark");
		
	}
	
	// Create a unique ID for the CSS selector
	createUUID() {
		var s = [];
		var hexDigits = "0123456789abcdef";
		for (var i = 0; i < 10; i++) {
			s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
		}
		var uuid = s.join("");
		return "cv_" + uuid;
	}
	
	
	setData(data){
			var i = 0;
			var fields = [];
			var oSlide;
			var data_item;
			var rangeFieldName = "";
			var current_item;
			var vizUtils = require('api/SplunkVisualizationUtils');
			
			const { carousel_viz, carousel_viz_slide} = require('carousel-viz');
			try{
				//------------------------------  Get data row field indexes ----------------------------------------------------------------------
				for (i=0; i<data.fields.length; i++){
					fields[data.fields[i].name.toLowerCase()]  = i;
				}
				// we don't need to call it value - just use the first field
				if(typeof fields["value"] === 'undefined'){ fields['value'] = 0;}
				for (i=0; i<data.rows.length; i++){
					data_item = data.rows[i];
					if(typeof data_item[fields["style"]] === 'undefined'){
						rangeFieldName = "range";
					}else{
						rangeFieldName = "style";
					}
					//------------------------------  Create or Locate item Objects ----------------------------------------------------------------------
					oSlide = new carousel_viz_slide();
					oSlide.value              = vizUtils.escapeHtml(data_item[fields["value"]])
					oSlide.unit               = vizUtils.escapeHtml(data_item[fields["unit"]])
					if (oSlide.unit=="") { oSlide.unit = this.unit;}
					if (typeof fields["caption"] ==='undefined' || data_item[fields["caption"]]==""){ oSlide.caption = this.defaultCaption;} else {oSlide.caption=vizUtils.escapeHtml(data_item[fields["caption"]]);}
					if (typeof fields["range"] ==='undefined' || data_item[fields["range"]]==""){ oSlide.range = "default";}else{oSlide.range=vizUtils.escapeHtml(data_item[fields[rangeFieldName]]);}
					
					oSlide.size				  = this.size;
					oSlide.forceAllCaps       = this.forceAllCaps;
					oSlide.numDecimalPlaces   = this.numDecimalPlaces;
					oSlide.colorMode          = this.colorMode;
					oSlide.thousandsSeparator = this.thousandsSeparator;
					oSlide.unitPosition	      = this.unitPosition;
										
					this.slides.push(oSlide);
				}	
			} catch(err) {
				console.log("Error setting data. " + err);
			}
		}
	
	
	getHTML(){
		var html = "";
		var dir = "";
		if (this.rtl && this.orientation=="horizontal") { dir=" dir=\"rtl\"";} // Bug: can only do rtl if horizontal: https://github.com/kenwheeler/slick/issues/818
		if (this.isSplunkDarkMode){
			html += "<style>.slick-dots li button:before, .slick-dots li.slick-active button:before{color:white!important;}</style>";
		}
		var value = this.value
		var i =0;
		 html +='<div id="'  + this.id + '" class="center"' + dir + '>';
		 for(i=0;i<this.slides.length;i++){
			 html += this.slides[i].getHTML();
		 }
		 html += '</div>';
		 return html;
	}
	
	start(){
				var objCarousel = this;
				var sizes = {xsmall:70,small:95,normal:145,large:195,xlarge:240}
				var isVertical = (this.orientation=="vertical");
				window.jQuery('#' + this.id).slick({
				  rtl: this.rtl,
				  centerMode: false,
				  dots: this.showDots,
				  vertical: isVertical,
				  verticalSwiping: isVertical,
				  arrows: false,
				  infinite: this.isInfinite,
				  variableWidth: this.autoWidth,
				  centerPadding: '60px',
				  slidesToShow: objCarousel.slidesToShow,
				  slidesToScroll: objCarousel.slidesToScroll,				  
				  autoplay: objCarousel.autoplay,
				  autoplaySpeed: objCarousel.autoplaySpeed,
				  adaptiveHeight: true,
				  pauseOnFocus: true,
				  focusOnSelect: true,
		  		  cssEase: 'ease'
				});
	    		
				window.jQuery("div#" + this.id + " div.value").textfill({allowOverflow:false,changeLineHeight:true,maxFontPixels:sizes[objCarousel.size],widthOnly:true});
				window.jQuery("div#" + this.id + " div.caption").textfill({allowOverflow:false,changeLineHeight:false,maxFontPixels:18,minFontPixels:8});
				
				// On edge hit
				window.jQuery("div#" + this.id ).on('reSize', function(event, slick){
					window.jQuery("div#" + this.id + " div.value").textfill({allowOverflow:false,changeLineHeight:true,maxFontPixels:sizes[objCarousel.size],widthOnly:true});
					window.jQuery("div#" + this.id + " div.caption").textfill({allowOverflow:false,changeLineHeight:false,maxFontPixels:18,minFontPixels:8});
				});
				
				
		}
	
	}
	
	
	/* Slide class
		This class defines a slide in the carousel.
		There will be multiple instances, each showing a different row of the results.
	*/
	class carousel_viz_slide{

		constructor(){
			this.value = "";	
			this.caption = "";	
			this.unit = "";
			this.range = "";
			this.forceAllCaps = false;
			this.numDecimalPlaces = 0;
			this.colorMode = "foreground";
			this.thousandsSeparator = false;
			this.unitPosition = "right";
			this.rtl = false
			this.size = "normal";
		}
		
		/* Returns the CSS class for the current slide based on Range/Style and colorMode status */
		getStyle(){
			var style = this.size;
			switch(this.range.toLowerCase()){
				case "low":
				case "green":
				case "ok":
					style += " green";
					break;
				case "elevated":
				case "yellow":
				case "amber":
				case "orange":
				case "warning":
					style += " yellow";
					break;
				case "severe":
				case "critical":
				case "red":
					style +=" red";
					break;
				default:
					style +=" default";
					break;
			}
		
			if (this.colorMode=="background"){
				style += 'Block';
			}else{
				style += 'NoBackground';
			}
			
			return style;
		}

		
	numberWithCommas(x){
		var parts = x.toString().split(".");
		parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
		return parts.join(".");
	}
	

		//Format the value - eg UPPERCASE, 1,000  23.22
		getValue(){
			var formattedValue = this.value;
			
			if(! isNaN(formattedValue)){
				formattedValue = Number(Math.round(parseInt(formattedValue,10)+'e'+this.numDecimalPlaces)+'e-'+this.numDecimalPlaces).toFixed(this.numDecimalPlaces);;
				if(this.thousandsSeparator){ formattedValue = this.numberWithCommas(formattedValue);}
			}
			
			if (this.forceAllCaps){
				formattedValue = formattedValue.toUpperCase();
			}
			
			return formattedValue;
		}
		
		/* A simple HTML block representing the Slide's HTML content. */
		getHTML(){
			var html = "";
			html += '<div class="singlevaluebox ' + this.getStyle() + '">';
			
			if(this.unitPosition=="before"){
				html += '<div class="value"><span>' + this.unit + "&thinsp;" +  this.getValue() +  '</span></div>';
			}else{
				html += '<div class="value"><span>' + this.getValue() + "&thinsp;" + this.unit +  '</span></div>';
			}
			html += '<div class="caption"><span>' + this.caption + '</span></div>';
			html += '</div>';
			return html;
		}
		
		

		
		
	}
	
	
	
module.exports = { carousel_viz, carousel_viz_slide}
