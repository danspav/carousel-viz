class carousel_viz{
	constructor(){
		this.slides = [];
		this.slidesToShow = 3;
		this.autoplay = true; 
		this.autoplaySpeed = 3000;
		this.blockFill = true;
		// Value Options
		this.forceAllCaps = false;
		this.numDecimalPlaces = 0;
		
		this.id = this.createUUID();
	}

	
	
		
	setConfig(config, namespace){
	// Get Config parameters:
		this.slidesToShow = parseInt(config[namespace + 'slidesToShow']) || 3;
		this.autoplay = config[namespace + "autoplay"] || true;
		this.forceAllCaps = config[namespace + "forceAllCaps"] || false;
		this.autoplaySpeed = parseInt(config[namespace + 'autoplaySpeed']) || 3000;
		this.numDecimalPlaces = parseInt(config[namespace + 'numDecimalPlaces']) || 0;
		this.blockFill = config[namespace + "blockFill"] || true;
		if (this.autoplaySpeed < 1000){ this.autoplaySpeed=1000;}
		//Enforce Boolean values to be boolean
		if(this.forceAllCaps!=true){this.forceAllCaps=false;}
	}
	
	// Create a unique ID for the CSS selector
	createUUID() {
		var s = [];
		var hexDigits = "0123456789abcdef";
		for (var i = 0; i < 10; i++) {
			s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
		}
		var uuid = s.join("");
		return "cv_" + uuid;
	}
	
	
	setData(data){
			var i = 0;
			var fields = [];
			var oSlide;
			var data_item;
			var rangeFieldName = "";
			var current_item;
			var SplunkVisUtils = require('api/SplunkVisualizationUtils');
			var vizUtils = require('api/SplunkVisualizationUtils');
			const { carousel_viz, carousel_viz_slide} = require('carousel-viz');
			try{
				//------------------------------  Get data row field indexes ----------------------------------------------------------------------
				for (i=0; i<data.fields.length; i++){
					fields[data.fields[i].name.toLowerCase()]  = i;
				}

				for (i=0; i<data.rows.length; i++){
					data_item = data.rows[i];
					if(typeof data_item[fields["style"]] === 'undefined'){
						rangeFieldName = "range";
					}else{
						rangeFieldName = "style";
					}
					//------------------------------  Create or Locate item Objects ----------------------------------------------------------------------
	
					oSlide = new carousel_viz_slide();
					oSlide.value            = vizUtils.escapeHtml(data_item[fields["value"]])
					oSlide.unit             = vizUtils.escapeHtml(data_item[fields["unit"]])
					oSlide.caption          = vizUtils.escapeHtml(data_item[fields["caption"]])
					oSlide.range            = vizUtils.escapeHtml(data_item[fields[rangeFieldName]])
					oSlide.forceAllCaps     = this.forceAllCaps;
					oSlide.numDecimalPlaces = this.numDecimalPlaces;
					oSlide.blockFill        = this.blockFill;
										
					this.slides.push(oSlide);
				}	
			} catch(err) {
				console.log("Error setting data. " + err);
			}
		}
	
	
	getHTML(){
		var html = "";
		var i =0;
		 html ='<section id="'  + this.id + '" class="center slider">';
		 for(i=0;i<this.slides.length;i++){
			 html += this.slides[i].getHTML();
		 }
		 html += '</section>';
		 return html;
	}
	
	start(){
				
				window.jQuery('#' + this.id).slick({
				  centerMode: true,
				  infinite: true,
				  variableWidth: true,
				  centerPadding: '60px',
				  slidesToShow: 3,
				  autoplay: true,
				  autoplaySpeed: 3000,
				  pauseOnFocus: true,
				  swipeToSlide: true,
				  responsive: [
					{
					  breakpoint: 768,
					  settings: {
						arrows: false,
						centerMode: true,
						centerPadding: '40px',
						slidesToShow: 3
					  }
					},
					{
					  breakpoint: 480,
					  settings: {
						arrows: false,
						centerMode: true,
						centerPadding: '40px',
						slidesToShow: 1
					  }
					}
				  ]
				});
	    		

				window.jQuery("section#" + this.id + " div.value").textfill({allowOverflow:false,changeLineHeight:true,maxFontPixels:1000,widthOnly:true});
				window.jQuery("section#" + this.id + " div.caption").textfill({allowOverflow:false,changeLineHeight:true,maxFontPixels:18});
				
				
		}
	
	}
	
	
	/* Slide class
		This class defines a slide in the carousel.
		There will be multiple instances, each showing a different row of the results.
	*/
	class carousel_viz_slide{

		constructor(){
			this.value = "";	
			this.caption = "";	
			this.unit = "";
			this.range = "";
			this.forceAllCaps = false;
			this.numDecimalPlaces = 0;
			this.blockFill = true;
		}
		
		/* Returns the CSS class for the current slide based on Range/Style and blockFill status */
		getStyle(){
			var style = "";
			switch(this.range.toLowerCase()){
				case "low":
				case "green":
				case "ok":
					style = "green";
					break;
				case "elevated":
				case "yellow":
				case "amber":
				case "orange":
				case "warning":
					style = "yellow";
					break;
				case "severe":
				case "critical":
				case "red":
					style="red";
					break;
				default:
					style="default";
					break;
			}
		
			if (this.blockFill){
				style += 'Block';
			}else{
				style += 'NoBackground';
			}
			return style;
		}

		
		getValue(){
			var formattedValue = this.value;
			
			if(typeof formattedValue == 'number'){
				formattedValue = Number(Math.round(parseInt(formattedValue,10)+'e'+this.numDecimalPlaces)+'e-'+this.numDecimalPlaces);
			}
			
			if (this.forceAllCaps){
				formattedValue = formattedValue.toUpperCase();
			}
			
			return formattedValue;
		}
		
		/* A simple HTML block representing the Slide's HTML content. */
		getHTML(){
			var html = "<div>";
			html += '<div class="singlevaluebox ' + this.getStyle() + '">';
			html += '<div class="value"><span>' + this.getValue() + '</span></div>';
			html += '<div class="caption"><span>' + this.caption + '</span></div>';
			html += '</div></div>';
			return html;
		}
		
		

		
		
	}
	
	
	
module.exports = { carousel_viz, carousel_viz_slide}
